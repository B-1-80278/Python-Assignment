
1.Write a MongoDB query to display all the documents in the collection restaurants.

> db.restaurant.find().pretty()
{
	"_id" : ObjectId("654a060c52ceac3d7884da83"),
	"address" : {
		"building" : "469",
		"coord" : [
			-73.961704,
			40.662942
		],
		"street" : "Flatbush Avenue",
		"zipcode" : "11225"
	},
	"borough" : "Brooklyn",
	"cuisine" : "Hamburgers",
	"grades" : [
		{
			"date" : ISODate("2014-12-30T00:00:00Z"),
			"grade" : "A",
			"score" : 8
		},
		{
			"date" : ISODate("2014-07-01T00:00:00Z"),
			"grade" : "B",
			"score" : 23
		},
		{
			"date" : ISODate("2013-04-30T00:00:00Z"),
			"grade" : "A",
			"score" : 12
		},
		{
			"date" : ISODate("2012-05-08T00:00:00Z"),
			"grade" : "A",
			"score" : 12
		}
	],
	"name" : "Wendy'S",
	"restaurant_id" : "30112340"
}


2. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant.

> db.restaurant.find({}, {restaurant_id:1, name:1, borough:1, cuisine:1}).pretty()
{
	"_id" : ObjectId("654a060c52ceac3d7884da83"),
	"borough" : "Brooklyn",
	"cuisine" : "Hamburgers",
	"name" : "Wendy'S",
	"restaurant_id" : "30112340"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884da84"),
	"borough" : "Queens",
	"cuisine" : "Jewish/Kosher",
	"name" : "Tov Kosher Kitchen",
	"restaurant_id" : "40356068"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884da85"),
	"borough" : "Brooklyn",
	"cuisine" : "American ",
	"name" : "Regina Caterers",
	"restaurant_id" : "40356649"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884da86"),
	"borough" : "Queens",
	"cuisine" : "American ",
	"name" : "Brunos On The Boulevard",
	"restaurant_id" : "40356151"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884da87"),
	"borough" : "Queens",
	"cuisine" : "Ice Cream, Gelato, Yogurt, Ices",
	"name" : "Carvel Ice Cream",
	"restaurant_id" : "40361322"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884da88"),
	"borough" : "Brooklyn",
	"cuisine" : "Delicatessen",
	"name" : "Nordic Delicacies",
	"restaurant_id" : "40361390"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884da89"),
	"borough" : "Brooklyn",
	"cuisine" : "American ",
	"name" : "The Movable Feast",
	"restaurant_id" : "40361606"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884da8a"),
	"borough" : "Manhattan",
	"cuisine" : "American ",
	"name" : "Glorious Food",
	"restaurant_id" : "40361521"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884da8b"),
	"borough" : "Brooklyn",
	"cuisine" : "Ice Cream, Gelato, Yogurt, Ices",
	"name" : "Carvel Ice Cream",
	"restaurant_id" : "40360076"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884da8c"),
	"borough" : "Queens",
	"cuisine" : "Delicatessen",
	"name" : "Sal'S Deli",
	"restaurant_id" : "40361618"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884da8d"),
	"borough" : "Manhattan",
	"cuisine" : "Delicatessen",
	"name" : "Bully'S Deli",
	"restaurant_id" : "40361708"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884da8e"),
	"borough" : "Queens",
	"cuisine" : "Delicatessen",
	"name" : "Steve Chu'S Deli & Grocery",
	"restaurant_id" : "40361998"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884da8f"),
	"borough" : "Brooklyn",
	"cuisine" : "Hamburgers",
	"name" : "White Castle",
	"restaurant_id" : "40362344"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884da90"),
	"borough" : "Manhattan",
	"cuisine" : "American ",
	"name" : "P & S Deli Grocery",
	"restaurant_id" : "40362264"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884da91"),
	"borough" : "Manhattan",
	"cuisine" : "American ",
	"name" : "Angelika Film Center",
	"restaurant_id" : "40362274"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884da92"),
	"borough" : "Manhattan",
	"cuisine" : "Chicken",
	"name" : "Harriet'S Kitchen",
	"restaurant_id" : "40362098"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884da93"),
	"borough" : "Manhattan",
	"cuisine" : "Turkish",
	"name" : "The Country Cafe",
	"restaurant_id" : "40362715"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884da94"),
	"borough" : "Brooklyn",
	"cuisine" : "Caribbean",
	"name" : "Shashemene Int'L Restaura",
	"restaurant_id" : "40362869"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884da95"),
	"borough" : "Queens",
	"cuisine" : "Chinese",
	"name" : "Ho Mei Restaurant",
	"restaurant_id" : "40362432"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884da96"),
	"borough" : "Bronx",
	"cuisine" : "Ice Cream, Gelato, Yogurt, Ices",
	"name" : "Carvel Ice Cream",
	"restaurant_id" : "40363093"
}

3. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant.

db.restaurant.find({}, {restaurant_id:1,_id:0, name:1, borough:1, cuisine:1}).pretty()

{
	"borough" : "Brooklyn",
	"cuisine" : "Hamburgers",
	"name" : "Wendy'S",
	"restaurant_id" : "30112340"
}
{
	"borough" : "Queens",
	"cuisine" : "Jewish/Kosher",
	"name" : "Tov Kosher Kitchen",
	"restaurant_id" : "40356068"
}
{
	"borough" : "Brooklyn",
	"cuisine" : "American ",
	"name" : "Regina Caterers",
	"restaurant_id" : "40356649"
}
{
	"borough" : "Queens",
	"cuisine" : "American ",
	"name" : "Brunos On The Boulevard",
	"restaurant_id" : "40356151"
}
{
	"borough" : "Queens",
	"cuisine" : "Ice Cream, Gelato, Yogurt, Ices",
	"name" : "Carvel Ice Cream",
	"restaurant_id" : "40361322"
}
{
	"borough" : "Brooklyn",
	"cuisine" : "Delicatessen",
	"name" : "Nordic Delicacies",
	"restaurant_id" : "40361390"
}
{
	"borough" : "Brooklyn",
	"cuisine" : "American ",
	"name" : "The Movable Feast",
	"restaurant_id" : "40361606"
}
{
	"borough" : "Manhattan",
	"cuisine" : "American ",
	"name" : "Glorious Food",
	"restaurant_id" : "40361521"
}
{
	"borough" : "Brooklyn",
	"cuisine" : "Ice Cream, Gelato, Yogurt, Ices",
	"name" : "Carvel Ice Cream",
	"restaurant_id" : "40360076"
}
{
	"borough" : "Queens",
	"cuisine" : "Delicatessen",
	"name" : "Sal'S Deli",
	"restaurant_id" : "40361618"
}
{
	"borough" : "Manhattan",
	"cuisine" : "Delicatessen",
	"name" : "Bully'S Deli",
	"restaurant_id" : "40361708"
}
{
	"borough" : "Queens",
	"cuisine" : "Delicatessen",
	"name" : "Steve Chu'S Deli & Grocery",
	"restaurant_id" : "40361998"
}
{
	"borough" : "Brooklyn",
	"cuisine" : "Hamburgers",
	"name" : "White Castle",
	"restaurant_id" : "40362344"
}
{
	"borough" : "Manhattan",
	"cuisine" : "American ",
	"name" : "P & S Deli Grocery",
	"restaurant_id" : "40362264"
}
{
	"borough" : "Manhattan",
	"cuisine" : "American ",
	"name" : "Angelika Film Center",
	"restaurant_id" : "40362274"
}
{
	"borough" : "Manhattan",
	"cuisine" : "Chicken",
	"name" : "Harriet'S Kitchen",
	"restaurant_id" : "40362098"
}
{
	"borough" : "Manhattan",
	"cuisine" : "Turkish",
	"name" : "The Country Cafe",
	"restaurant_id" : "40362715"
}
{
	"borough" : "Brooklyn",
	"cuisine" : "Caribbean",
	"name" : "Shashemene Int'L Restaura",
	"restaurant_id" : "40362869"
}
{
	"borough" : "Queens",
	"cuisine" : "Chinese",
	"name" : "Ho Mei Restaurant",
	"restaurant_id" : "40362432"
}
{
	"borough" : "Bronx",
	"cuisine" : "Ice Cream, Gelato, Yogurt, Ices",
	"name" : "Carvel Ice Cream",
	"restaurant_id" : "40363093"
}
4. Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection restaurant.

> db.restaurant.find({}, {_id:0, restaurant_id:1, name:1, borough:1, zipcode: 1}).pretty().limit(10)
{ "borough" : "Brooklyn", "name" : "Wendy'S", "restaurant_id" : "30112340" }
{
	"borough" : "Queens",
	"name" : "Tov Kosher Kitchen",
	"restaurant_id" : "40356068"
}
{
	"borough" : "Brooklyn",
	"name" : "Regina Caterers",
	"restaurant_id" : "40356649"
}
{
	"borough" : "Queens",
	"name" : "Brunos On The Boulevard",
	"restaurant_id" : "40356151"
}
{
	"borough" : "Queens",
	"name" : "Carvel Ice Cream",
	"restaurant_id" : "40361322"
}
{
	"borough" : "Brooklyn",
	"name" : "Nordic Delicacies",
	"restaurant_id" : "40361390"
}
{
	"borough" : "Brooklyn",
	"name" : "The Movable Feast",
	"restaurant_id" : "40361606"
}
{
	"borough" : "Manhattan",
	"name" : "Glorious Food",
	"restaurant_id" : "40361521"
}
{
	"borough" : "Brooklyn",
	"name" : "Carvel Ice Cream",
	"restaurant_id" : "40360076"
}
{
	"borough" : "Queens",
	"name" : "Sal'S Deli",
	"restaurant_id" : "40361618"
}

5. Write a MongoDB query to display all the restaurant which is in the borough Bronx.

db.restaurant.find({borough: 'Bronx'}).pretty().limit(10)


db.restaurant.find({borough: 'Bronx'}).pretty().limit(1)
{
	"_id" : ObjectId("654a060c52ceac3d7884da96"),
	"address" : {
		"building" : "1006",
		"coord" : [
			-73.84856870000002,
			40.8903781
		],
		"street" : "East 233 Street",
		"zipcode" : "10466"
	},
	"borough" : "Bronx",
	"cuisine" : "Ice Cream, Gelato, Yogurt, Ices",
	"grades" : [
		{
			"date" : ISODate("2014-04-24T00:00:00Z"),
			"grade" : "A",
			"score" : 10
		},
		{
			"date" : ISODate("2013-09-05T00:00:00Z"),
			"grade" : "A",
			"score" : 10
		},
		{
			"date" : ISODate("2013-02-21T00:00:00Z"),
			"grade" : "A",
			"score" : 9
		},
		{
			"date" : ISODate("2012-07-03T00:00:00Z"),
			"grade" : "A",
			"score" : 11
		},
		{
			"date" : ISODate("2011-07-11T00:00:00Z"),
			"grade" : "A",
			"score" : 5
		}
	],
	"name" : "Carvel Ice Cream",
	"restaurant_id" : "40363093"
}



6. Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx.

db.restaurants.find({borough:'Bronx'}).limit(5).pretty()
{
	"_id" : ObjectId("6549f8f7de0b471135cd9941"),
	"address" : {
		"building" : "1007",
		"coord" : [
			-73.856077,
			40.848447
		],
		"street" : "Morris Park Ave",
		"zipcode" : "10462"
	},
	"borough" : "Bronx",
	"cuisine" : "Bakery",
	"grades" : [
		{
			"date" : ISODate("2014-03-03T00:00:00Z"),
			"grade" : "A",
			"score" : 2
		},
		{
			"date" : ISODate("2013-09-11T00:00:00Z"),
			"grade" : "A",
			"score" : 6
		},
		{
			"date" : ISODate("2013-01-24T00:00:00Z"),
			"grade" : "A",
			"score" : 10
		},
		{
			"date" : ISODate("2011-11-23T00:00:00Z"),
			"grade" : "A",
			"score" : 9
		},
		{
			"date" : ISODate("2011-03-10T00:00:00Z"),
			"grade" : "B",
			"score" : 14
		}
	],
	"name" : "Morris Park Bake Shop",
	"restaurant_id" : "30075445"
}
{
	"_id" : ObjectId("6549f8f7de0b471135cd9951"),
	"address" : {
		"building" : "1006",
		"coord" : [
			-73.84856870000002,
			40.8903781
		],
		"street" : "East 233 Street",
		"zipcode" : "10466"
	},
	"borough" : "Bronx",
	"cuisine" : "Ice Cream, Gelato, Yogurt, Ices",
	"grades" : [
		{
			"date" : ISODate("2014-04-24T00:00:00Z"),
			"grade" : "A",
			"score" : 10
		},
		{
			"date" : ISODate("2013-09-05T00:00:00Z"),
			"grade" : "A",
			"score" : 10
		},
		{
			"date" : ISODate("2013-02-21T00:00:00Z"),
			"grade" : "A",
			"score" : 9
		},
		{
			"date" : ISODate("2012-07-03T00:00:00Z"),
			"grade" : "A",
			"score" : 11
		},
		{
			"date" : ISODate("2011-07-11T00:00:00Z"),
			"grade" : "A",
			"score" : 5
		}
	],
	"name" : "Carvel Ice Cream",
	"restaurant_id" : "40363093"
}
{
	"_id" : ObjectId("6549f8f7de0b471135cd9956"),
	"address" : {
		"building" : "2300",
		"coord" : [
			-73.8786113,
			40.8502883
		],
		"street" : "Southern Boulevard",
		"zipcode" : "10460"
	},
	"borough" : "Bronx",
	"cuisine" : "American ",
	"grades" : [
		{
			"date" : ISODate("2014-05-28T00:00:00Z"),
			"grade" : "A",
			"score" : 11
		},
		{
			"date" : ISODate("2013-06-19T00:00:00Z"),
			"grade" : "A",
			"score" : 4
		},
		{
			"date" : ISODate("2012-06-15T00:00:00Z"),
			"grade" : "A",
			"score" : 3
		}
	],
	"name" : "Wild Asia",
	"restaurant_id" : "40357217"
}
{
	"_id" : ObjectId("6549f8f7de0b471135cd9960"),
	"address" : {
		"building" : "1236",
		"coord" : [
			-73.8893654,
			40.81376179999999
		],
		"street" : "238 Spofford Ave",
		"zipcode" : "10474"
	},
	"borough" : "Bronx",
	"cuisine" : "Chinese",
	"grades" : [
		{
			"date" : ISODate("2013-12-30T00:00:00Z"),
			"grade" : "A",
			"score" : 8
		},
		{
			"date" : ISODate("2013-01-08T00:00:00Z"),
			"grade" : "A",
			"score" : 10
		},
		{
			"date" : ISODate("2012-06-12T00:00:00Z"),
			"grade" : "B",
			"score" : 15
		}
	],
	"name" : "Happy Garden",
	"restaurant_id" : "40363289"
}
{
	"_id" : ObjectId("6549f8f7de0b471135cd9972"),
	"address" : {
		"building" : "277",
		"coord" : [
			-73.8941893,
			40.8634684
		],
		"street" : "East Kingsbridge Road",
		"zipcode" : "10458"
	},
	"borough" : "Bronx",
	"cuisine" : "Chinese",
	"grades" : [
		{
			"date" : ISODate("2014-03-03T00:00:00Z"),
			"grade" : "A",
			"score" : 10
		},
		{
			"date" : ISODate("2013-09-26T00:00:00Z"),
			"grade" : "A",
			"score" : 10
		},
		{
			"date" : ISODate("2013-03-19T00:00:00Z"),
			"grade" : "A",
			"score" : 10
		},
		{
			"date" : ISODate("2012-08-29T00:00:00Z"),
			"grade" : "A",
			"score" : 11
		},
		{
			"date" : ISODate("2011-08-17T00:00:00Z"),
			"grade" : "A",
			"score" : 13
		}
	],
	"name" : "Happy Garden",
	"restaurant_id" : "40364296"
}


7.Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx.

db.restaurant.find({}).skip(5).limit(5).pretty()

{
	"_id" : ObjectId("654a060c52ceac3d7884da88"),
	"address" : {
		"building" : "6909",
		"coord" : [
			-74.0259567,
			40.6353674
		],
		"street" : "3 Avenue",
		"zipcode" : "11209"
	},
	"borough" : "Brooklyn",
	"cuisine" : "Delicatessen",
	"grades" : [
		{
			"date" : ISODate("2014-08-21T00:00:00Z"),
			"grade" : "A",
			"score" : 4
		},
		{
			"date" : ISODate("2014-03-05T00:00:00Z"),
			"grade" : "A",
			"score" : 3
		},
		{
			"date" : ISODate("2013-01-10T00:00:00Z"),
			"grade" : "A",
			"score" : 10
		}
	],
	"name" : "Nordic Delicacies",
	"restaurant_id" : "40361390"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884da89"),
	"address" : {
		"building" : "284",
		"coord" : [
			-73.9829239,
			40.6580753
		],
		"street" : "Prospect Park West",
		"zipcode" : "11215"
	},
	"borough" : "Brooklyn",
	"cuisine" : "American ",
	"grades" : [
		{
			"date" : ISODate("2014-11-19T00:00:00Z"),
			"grade" : "A",
			"score" : 11
		},
		{
			"date" : ISODate("2013-11-14T00:00:00Z"),
			"grade" : "A",
			"score" : 2
		},
		{
			"date" : ISODate("2012-12-05T00:00:00Z"),
			"grade" : "A",
			"score" : 13
		},
		{
			"date" : ISODate("2012-05-17T00:00:00Z"),
			"grade" : "A",
			"score" : 11
		}
	],
	"name" : "The Movable Feast",
	"restaurant_id" : "40361606"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884da8a"),
	"address" : {
		"building" : "522",
		"coord" : [
			-73.95171,
			40.767461
		],
		"street" : "East   74 Street",
		"zipcode" : "10021"
	},
	"borough" : "Manhattan",
	"cuisine" : "American ",
	"grades" : [
		{
			"date" : ISODate("2014-09-02T00:00:00Z"),
			"grade" : "A",
			"score" : 12
		},
		{
			"date" : ISODate("2013-12-19T00:00:00Z"),
			"grade" : "B",
			"score" : 16
		},
		{
			"date" : ISODate("2013-05-28T00:00:00Z"),
			"grade" : "A",
			"score" : 9
		},
		{
			"date" : ISODate("2012-12-07T00:00:00Z"),
			"grade" : "A",
			"score" : 13
		},
		{
			"date" : ISODate("2012-03-29T00:00:00Z"),
			"grade" : "A",
			"score" : 11
		}
	],
	"name" : "Glorious Food",
	"restaurant_id" : "40361521"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884da8b"),
	"address" : {
		"building" : "203",
		"coord" : [
			-73.97822040000001,
			40.6435254
		],
		"street" : "Church Avenue",
		"zipcode" : "11218"
	},
	"borough" : "Brooklyn",
	"cuisine" : "Ice Cream, Gelato, Yogurt, Ices",
	"grades" : [
		{
			"date" : ISODate("2014-02-10T00:00:00Z"),
			"grade" : "A",
			"score" : 2
		},
		{
			"date" : ISODate("2013-01-02T00:00:00Z"),
			"grade" : "A",
			"score" : 13
		},
		{
			"date" : ISODate("2012-01-09T00:00:00Z"),
			"grade" : "A",
			"score" : 3
		},
		{
			"date" : ISODate("2011-11-07T00:00:00Z"),
			"grade" : "P",
			"score" : 12
		},
		{
			"date" : ISODate("2011-07-21T00:00:00Z"),
			"grade" : "A",
			"score" : 13
		}
	],
	"name" : "Carvel Ice Cream",
	"restaurant_id" : "40360076"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884da8c"),
	"address" : {
		"building" : "129-08",
		"coord" : [
			-73.839297,
			40.78147
		],
		"street" : "20 Avenue",
		"zipcode" : "11356"
	},
	"borough" : "Queens",
	"cuisine" : "Delicatessen",
	"grades" : [
		{
			"date" : ISODate("2014-08-16T00:00:00Z"),
			"grade" : "A",
			"score" : 12
		},
		{
			"date" : ISODate("2013-08-27T00:00:00Z"),
			"grade" : "A",
			"score" : 9
		},
		{
			"date" : ISODate("2012-09-20T00:00:00Z"),
			"grade" : "A",
			"score" : 7
		},
		{
			"date" : ISODate("2011-09-29T00:00:00Z"),
			"grade" : "A",
			"score" : 10
		}
	],
	"name" : "Sal'S Deli",
	"restaurant_id" : "40361618"
}

8. Write a MongoDB query to find the restaurants who achieved a score more than 90.


 db.restaurant.find({grades: {$elemMatch: {score: {$gt: 90}}}}).pretty()
{
	"_id" : ObjectId("654a060c52ceac3d7884dbe2"),
	"address" : {
		"building" : "65",
		"coord" : [
			-73.9782725,
			40.7624022
		],
		"street" : "West   54 Street",
		"zipcode" : "10019"
	},
	"borough" : "Manhattan",
	"cuisine" : "American ",
	"grades" : [
		{
			"date" : ISODate("2014-08-22T00:00:00Z"),
			"grade" : "A",
			"score" : 11
		},
		{
			"date" : ISODate("2014-03-28T00:00:00Z"),
			"grade" : "C",
			"score" : 131
		},
		{
			"date" : ISODate("2013-09-25T00:00:00Z"),
			"grade" : "A",
			"score" : 11
		},
		{
			"date" : ISODate("2013-04-08T00:00:00Z"),
			"grade" : "B",
			"score" : 25
		},
		{
			"date" : ISODate("2012-10-15T00:00:00Z"),
			"grade" : "A",
			"score" : 11
		},
		{
			"date" : ISODate("2011-10-19T00:00:00Z"),
			"grade" : "A",
			"score" : 13
		}
	],
	"name" : "Murals On 54/Randolphs'S",
	"restaurant_id" : "40372466"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884dc82"),
	"address" : {
		"building" : "345",
		"coord" : [
			-73.9864626,
			40.7266739
		],
		"street" : "East 6 Street",
		"zipcode" : "10003"
	},
	"borough" : "Manhattan",
	"cuisine" : "Indian",
	"grades" : [
		{
			"date" : ISODate("2014-09-15T00:00:00Z"),
			"grade" : "A",
			"score" : 5
		},
		{
			"date" : ISODate("2014-01-14T00:00:00Z"),
			"grade" : "A",
			"score" : 8
		},
		{
			"date" : ISODate("2013-05-30T00:00:00Z"),
			"grade" : "A",
			"score" : 12
		},
		{
			"date" : ISODate("2013-04-24T00:00:00Z"),
			"grade" : "P",
			"score" : 2
		},
		{
			"date" : ISODate("2012-10-01T00:00:00Z"),
			"grade" : "A",
			"score" : 9
		},
		{
			"date" : ISODate("2012-04-06T00:00:00Z"),
			"grade" : "C",
			"score" : 92
		},
		{
			"date" : ISODate("2011-11-03T00:00:00Z"),
			"grade" : "C",
			"score" : 41
		}
	],
	"name" : "Gandhi",
	"restaurant_id" : "40381295"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884dde8"),
	"address" : {
		"building" : "130",
		"coord" : [
			-73.984758,
			40.7457939
		],
		"street" : "Madison Avenue",
		"zipcode" : "10016"
	},
	"borough" : "Manhattan",
	"cuisine" : "Pizza/Italian",
	"grades" : [
		{
			"date" : ISODate("2014-12-24T00:00:00Z"),
			"grade" : "Z",
			"score" : 31
		},
		{
			"date" : ISODate("2014-06-17T00:00:00Z"),
			"grade" : "C",
			"score" : 98
		},
		{
			"date" : ISODate("2013-12-12T00:00:00Z"),
			"grade" : "C",
			"score" : 32
		},
		{
			"date" : ISODate("2013-05-22T00:00:00Z"),
			"grade" : "B",
			"score" : 21
		},
		{
			"date" : ISODate("2012-05-02T00:00:00Z"),
			"grade" : "A",
			"score" : 11
		}
	],
	"name" : "Bella Napoli",
	"restaurant_id" : "40393488"
}


9. Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than
100.

db.restaurant.find({grades: {$elemMatch: {score: {$gt: 80, $lt: 100}}}}).pretty()
{
	"_id" : ObjectId("654a060c52ceac3d7884dc82"),
	"address" : {
		"building" : "345",
		"coord" : [
			-73.9864626,
			40.7266739
		],
		"street" : "East 6 Street",
		"zipcode" : "10003"
	},
	"borough" : "Manhattan",
	"cuisine" : "Indian",
	"grades" : [
		{
			"date" : ISODate("2014-09-15T00:00:00Z"),
			"grade" : "A",
			"score" : 5
		},
		{
			"date" : ISODate("2014-01-14T00:00:00Z"),
			"grade" : "A",
			"score" : 8
		},
		{
			"date" : ISODate("2013-05-30T00:00:00Z"),
			"grade" : "A",
			"score" : 12
		},
		{
			"date" : ISODate("2013-04-24T00:00:00Z"),
			"grade" : "P",
			"score" : 2
		},
		{
			"date" : ISODate("2012-10-01T00:00:00Z"),
			"grade" : "A",
			"score" : 9
		},
		{
			"date" : ISODate("2012-04-06T00:00:00Z"),
			"grade" : "C",
			"score" : 92
		},
		{
			"date" : ISODate("2011-11-03T00:00:00Z"),
			"grade" : "C",
			"score" : 41
		}
	],
	"name" : "Gandhi",
	"restaurant_id" : "40381295"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884dde8"),
	"address" : {
		"building" : "130",
		"coord" : [
			-73.984758,
			40.7457939
		],
		"street" : "Madison Avenue",
		"zipcode" : "10016"
	},
	"borough" : "Manhattan",
	"cuisine" : "Pizza/Italian",
	"grades" : [
		{
			"date" : ISODate("2014-12-24T00:00:00Z"),
			"grade" : "Z",
			"score" : 31
		},
		{
			"date" : ISODate("2014-06-17T00:00:00Z"),
			"grade" : "C",
			"score" : 98
		},
		{
			"date" : ISODate("2013-12-12T00:00:00Z"),
			"grade" : "C",
			"score" : 32
		},
		{
			"date" : ISODate("2013-05-22T00:00:00Z"),
			"grade" : "B",
			"score" : 21
		},
		{
			"date" : ISODate("2012-05-02T00:00:00Z"),
			"grade" : "A",
			"score" : 11
		}
	],
	"name" : "Bella Napoli",
	"restaurant_id" : "40393488"
}
{
	"_id" : ObjectId("654a060c52ceac3d7884e64e"),
	"address" : {
		"building" : "",
		"coord" : [
			-74.0163793,
			40.7167671
		],
		"street" : "Hudson River",
		"zipcode" : "10282"
	},
	"borough" : "Manhattan",
	"cuisine" : "American ",
	"grades" : [
		{
			"date" : ISODate("2014-06-27T00:00:00Z"),
			"grade" : "C",
			"score" : 89
		},
		{
			"date" : ISODate("2013-06-06T00:00:00Z"),
			"grade" : "A",
			"score" : 6
		},
		{
			"date" : ISODate("2012-06-19T00:00:00Z"),
			"grade" : "A",
			"score" : 13
		}
	],
	"name" : "West 79Th Street Boat Basin Cafe",
	"restaurant_id" : "40756344"
}

